@page "/jobs"
@using ApplicantJourney
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject Logic Logic

<h1>Jobs</h1>

<!-- Filters -->
<div class="filters">
    <details open>
        <summary>Filters</summary>
        <div class="filter-grid">
            <div>
                <label>Board token</label>
                <input class="form-control" @bind="BoardToken" />
                <small>Default: @ApplicantJourney.Constants.DefaultGreenhouseBoardToken</small>
            </div>

            <div>
                <label>Title contains</label>
                <input class="form-control" @bind="TitleContains" />
            </div>

            <div>
                <label>Location contains</label>
                <input class="form-control" @bind="LocationContains" />
            </div>

            <div>
                <label>Remote only</label>
                <input type="checkbox" class="form-check-input" @bind="RemoteOnly" />
            </div>

            <div>
                <label>Job type</label>
                <select class="form-select" @bind="SelectedJobTypeString">
                    <option value="">All</option>
                    @foreach (var v in Enum.GetValues(typeof(JobType)).Cast<JobType>())
                    {
                        <option value="@v.ToString()">@v</option>
                    }
                </select>
            </div>

            <div>
                <label>Source</label>
                <select class="form-select" @bind="SelectedSourceString">
                    <option value="">All</option>
                    @foreach (var v in Enum.GetValues(typeof(JobListingSource)).Cast<JobListingSource>())
                    {
                        <option value="@v.ToString()">@v</option>
                    }
                </select>
            </div>

            <div>
                <label>Posted after</label>
                <!-- Use InputDate to bind to DateTime? (fixes CS1503) -->
                <InputDate DateFormat="yyyy-MM-dd" class="form-control" @bind-Value="PostedAfter" />
            </div>

            <div>
                <label>Sort by</label>
                <select class="form-select" @bind="SortBy">
                    <option value="date">Date</option>
                    <option value="title">Title</option>
                    <option value="company">Company</option>
                </select>
            </div>

            <div>
                <label>Descending</label>
                <input type="checkbox" class="form-check-input" @bind="SortDesc" />
            </div>

            <div>
                <label>Page</label>
                <input class="form-control" type="number" min="@ApplicantJourney.Constants.DefaultPage" @bind="Page" />
            </div>

            <div>
                <label>Page size</label>
                <input class="form-control" type="number" min="@ApplicantJourney.Constants.DefaultPageSize" @bind="PageSize" />
            </div>
        </div>

        <div class="filter-actions">
            <button class="btn btn-primary" @onclick="LoadAsync">Apply</button>
            <button class="btn btn-secondary" @onclick="ResetAsync">Reset</button>
        </div>
    </details>
</div>

<!-- Results -->
@if (IsLoading)
{
    <p>Loading…</p>
}
else if (ErrorMessage is not null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (JobsPage.Count == 0)
{
    <p>No jobs found for the current filters.</p>
}
else
{
    <p><strong>@JobsPage.Count</strong> jobs on this page.</p>
    <div class="jobs-list">
        @foreach (var job in JobsPage)
        {
            <article class="job-card">
                <header>
                    <h3>@job.JobTitle</h3>
                    <div class="meta">
                        <span>@job.JobLocation?.PhysicalLocation</span>
                        <span>•</span>
                        <a href="@job.Url" target="_blank" rel="noopener noreferrer">@job.Url</a>
                    </div>
                </header>

                <!-- full HTML description -->
                <section class="job-description">
                    <div>@AsHtml(job.JobDescriptionHtml)</div>
                </section>

                <footer class="meta">
                    <span>Posted: @job.JobPostingDate.ToShortDateString()</span>
                    <span>•</span>
                    <span>Type: @job.Type</span>
                    <span>•</span>
                    <span>Source: @job.Source</span>
                </footer>
            </article>
        }
    </div>
}

@code {
    // ---- State (defaults use ApplicantJourney.Constants; no magic numbers) ----
    private string BoardToken = ApplicantJourney.Constants.DefaultGreenhouseBoardToken;
    private int CompanyId = 0;
    private bool IncludeContent = true;

    private string TitleContains;
    private string LocationContains;
    private bool RemoteOnly;

    private string SelectedJobTypeString;
    private string SelectedSourceString;

    // Use a nullable DateTime for the date filter; pairs with <InputDate>
    private DateTime? PostedAfter;

    private string SortBy = "date";
    private bool SortDesc = true;

    private int Page = ApplicantJourney.Constants.DefaultPage;
    private int PageSize = ApplicantJourney.Constants.DefaultPageSize;

    private List<JobListing> JobsPage = new();
    private bool IsLoading = false;
    private string ErrorMessage;

    private MarkupString AsHtml(string html) => new(html ?? string.Empty);

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            JobType? type = TryParseEnum<JobType>(SelectedJobTypeString);
            JobListingSource? source = TryParseEnum<JobListingSource>(SelectedSourceString);

            var result = await Logic.RunPipelineAsync(
                boardToken: BoardToken,
                companyId: CompanyId,
                includeContent: IncludeContent,
                titleContains: string.IsNullOrWhiteSpace(TitleContains) ? null : TitleContains,
                locationContains: string.IsNullOrWhiteSpace(LocationContains) ? null : LocationContains,
                remoteOnly: RemoteOnly ? true : (bool?)null,
                type: type,
                source: source,
                postedAfter: PostedAfter,     // pass DateTime? directly
                sortBy: SortBy,
                sortDesc: SortDesc,
                page: Page,
                pageSize: PageSize
            );

            JobsPage = result.ToList();
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = $"Network error: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResetAsync()
    {
        BoardToken = ApplicantJourney.Constants.DefaultGreenhouseBoardToken;
        CompanyId = 0;
        IncludeContent = true;
        TitleContains = null;
        LocationContains = null;
        RemoteOnly = false;
        SelectedJobTypeString = null;
        SelectedSourceString = null;
        PostedAfter = null; // reset nullable DateTime
        SortBy = "date";
        SortDesc = true;
        Page = ApplicantJourney.Constants.DefaultPage;
        PageSize = ApplicantJourney.Constants.DefaultPageSize;
        await LoadAsync();
    }

    // Helpers
    private static TEnum? TryParseEnum<TEnum>(string value) where TEnum : struct
        => Enum.TryParse<TEnum>(value, ignoreCase: true, out var parsed) ? parsed : null;
}

<style>
    .filter-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: .75rem;
        margin-top: .5rem;
    }

    .filter-actions {
        margin-top: .75rem;
        display: flex;
        gap: .5rem;
    }

    .jobs-list {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        margin-top: 1rem;
    }

    .job-card {
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: .5rem;
    }

        .job-card header h3 {
            margin: 0 0 .25rem 0;
        }

    .meta {
        color: #666;
        display: flex;
        gap: .5rem;
        flex-wrap: wrap;
    }

    .job-description :is(p, ul, ol) {
        margin: .5rem 0;
    }
</style>
